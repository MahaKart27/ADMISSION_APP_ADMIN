{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Venka\\\\OneDrive\\\\Desktop\\\\ADS\\\\New folder\\\\ADMISSION_APP_ADMIN\\\\admin-login-page\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport LoginForm from './components/LoginForm';\nimport AdminPage from './components/AdminPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [loggedIn, setLoggedIn] = useState(false);\n  const handleLogin = (username, password) => {\n    // You can implement your login logic here\n    // For simplicity, let's check if the username and password are not empty strings\n    if (username.trim() !== '' && password.trim() !== '') {\n      setLoggedIn(true);\n    } else {\n      alert('Invalid username or password');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: loggedIn ? /*#__PURE__*/_jsxDEV(AdminPage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 19\n    }, this) : /*#__PURE__*/_jsxDEV(LoginForm, {\n      handleLogin: handleLogin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 35\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"rumETxDPcQWJcg8a6Y55ZSVDz7g=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","LoginForm","AdminPage","jsxDEV","_jsxDEV","App","_s","loggedIn","setLoggedIn","handleLogin","username","password","trim","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Venka/OneDrive/Desktop/ADS/New folder/ADMISSION_APP_ADMIN/admin-login-page/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport LoginForm from './components/LoginForm';\nimport AdminPage from './components/AdminPage';\n\nconst App = () => {\n  const [loggedIn, setLoggedIn] = useState(false);\n\n  const handleLogin = (username, password) => {\n    // You can implement your login logic here\n    // For simplicity, let's check if the username and password are not empty strings\n    if (username.trim() !== '' && password.trim() !== '') {\n      setLoggedIn(true);\n    } else {\n      alert('Invalid username or password');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      {loggedIn ? <AdminPage /> : <LoginForm handleLogin={handleLogin} />}\n    </div>\n  );\n};\n\nexport default App;\n\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,SAAS,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMS,WAAW,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC1C;IACA;IACA,IAAID,QAAQ,CAACE,IAAI,CAAC,CAAC,KAAK,EAAE,IAAID,QAAQ,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACpDJ,WAAW,CAAC,IAAI,CAAC;IACnB,CAAC,MAAM;MACLK,KAAK,CAAC,8BAA8B,CAAC;IACvC;EACF,CAAC;EAED,oBACET,OAAA;IAAKU,SAAS,EAAC,KAAK;IAAAC,QAAA,EACjBR,QAAQ,gBAAGH,OAAA,CAACF,SAAS;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAAGf,OAAA,CAACH,SAAS;MAACQ,WAAW,EAAEA;IAAY;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChE,CAAC;AAEV,CAAC;AAACb,EAAA,CAlBID,GAAG;AAAAe,EAAA,GAAHf,GAAG;AAoBT,eAAeA,GAAG;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}